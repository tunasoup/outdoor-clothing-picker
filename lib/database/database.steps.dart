// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    categories,
    activities,
    clothing,
  ];
  late final Shape0 categories = Shape0(
    source: i0.VersionedTable(
      entityName: 'categories',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_2, _column_3],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 activities = Shape1(
    source: i0.VersionedTable(
      entityName: 'activities',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 clothing = Shape2(
    source: i0.VersionedTable(
      entityName: 'clothing',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get normX =>
      columnsByName['norm_x']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get normY =>
      columnsByName['norm_y']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      true,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      $customConstraints: 'PRIMARY KEY AUTOINCREMENT',
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL UNIQUE',
    );
i1.GeneratedColumn<double> _column_2(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'norm_x',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<double> _column_3(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'norm_y',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
      $customConstraints: 'NOT NULL',
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
}

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get minTemp =>
      columnsByName['min_temp']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get maxTemp =>
      columnsByName['max_temp']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get category =>
      columnsByName['category']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get activity =>
      columnsByName['activity']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<int> _column_5(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'min_temp',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'max_temp',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints:
          'REFERENCES categories(name)ON UPDATE CASCADE ON DELETE SET NULL',
    );
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'activity',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints:
          'REFERENCES activities(name)ON UPDATE CASCADE ON DELETE SET NULL',
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from1To2: from1To2),
);
